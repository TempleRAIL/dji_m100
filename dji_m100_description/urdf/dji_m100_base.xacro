<?xml version="1.0"?>

<robot name="dji_m100" xmlns:xacro="http://ros.org/wiki/xacro">
  <!-- Arguments -->
  <xacro:arg name="hitl_model" default="true"/>
  <xacro:arg name="collision_enabled" default="false"/>
  <xacro:arg name="rotors_controlled" default="false"/>

  <!-- Properties -->
  <xacro:property name="rotor_velocity_slowdown_sim" value="10" />
  <xacro:property name="mass" value="2.355" /> <!-- [kg] -->
  <xacro:property name="mass_rotor" value="0.08" /> <!-- [kg] -->
  <xacro:property name="arm_length" value="0.17" /> <!-- [m] -->
  <xacro:property name="rotor_offset_top" value="0.1" /> <!-- [m] -->
  <xacro:property name="radius_rotor" value="0.195" /> <!-- [m] -->
  <xacro:property name="motor_constant" value="1.84858e-05" /> <!-- [kg.m/s^2] -->
  <xacro:property name="moment_constant" value="0.016" /> <!-- [m] -->
  <xacro:property name="time_constant_up" value="0.0125" /> <!-- [s] -->
  <xacro:property name="time_constant_down" value="0.025" /> <!-- [s] -->
  <xacro:property name="max_rot_velocity" value="838" /> <!-- [rad/s] -->
  <xacro:property name="sin30" value="0.5" />
  <xacro:property name="cos30" value="0.866025403784" />
  <xacro:property name="sqrt2" value="1.4142135623730951" />
  <xacro:property name="rotor_drag_coefficient" value="8.06428e-05" />
  <xacro:property name="rolling_moment_coefficient" value="0.000001" />

  <!-- Property Blocks -->
  <xacro:property name="body_inertia">
    <inertia ixx="0.1547563" ixy="0.0" ixz="0.0" iyy="0.1658929" iyz="0.0" izz="0.2077" /> <!-- [kg.m^2] [kg.m^2] [kg.m^2] [kg.m^2] [kg.m^2] [kg.m^2] -->
  </xacro:property>

  <!-- inertia of a single rotor, assuming it is a cuboid. Height=3mm, width=15mm -->
  <xacro:property name="rotor_inertia">
    <xacro:box_inertia x="${radius_rotor}" y="0.015" z="0.003" mass="${mass_rotor*rotor_velocity_slowdown_sim}" />
  </xacro:property>

  <!-- Included URDF Files -->
  <xacro:include filename="$(find dji_m100_description)/urdf/rotors/dji_m100_multirotors.xacro"/>
  <xacro:macro name="dji_m100_body">
    <!-- Instantiate DJI M100 multirotor base macro -->
    <xacro:dji_m100_multirotor_base
      robot_namespace="${namespace}"
      mass="${mass}"
      >
      <xacro:insert_block name="body_inertia" />
    </xacro:dji_m100_multirotor_base>

    <!-- Instantiate rotors -->
    <xacro:vertical_rotor
      robot_namespace="${namespace}"
      suffix="front_right"
      direction="ccw"
      motor_constant="${motor_constant}"
      moment_constant="${moment_constant}"
      parent="base_link"
      mass_rotor="${mass_rotor}"
      radius_rotor="${radius_rotor}"
      time_constant_up="${time_constant_up}"
      time_constant_down="${time_constant_down}"
      max_rot_velocity="${max_rot_velocity}"
      motor_number="0"
      rotor_drag_coefficient="${rotor_drag_coefficient}"
      rolling_moment_coefficient="${rolling_moment_coefficient}"
      color="Black">
      <origin xyz="${sqrt2 * arm_length} -${sqrt2 * arm_length} ${rotor_offset_top}" rpy="0 0 0" />
      <xacro:insert_block name="rotor_inertia" />
    </xacro:vertical_rotor>

    <xacro:vertical_rotor
      robot_namespace="${namespace}"
      suffix="back_left"
      direction="ccw"
      motor_constant="${motor_constant}"
      moment_constant="${moment_constant}"
      parent="base_link"
      mass_rotor="${mass_rotor}"
      radius_rotor="${radius_rotor}"
      time_constant_up="${time_constant_up}"
      time_constant_down="${time_constant_down}"
      max_rot_velocity="${max_rot_velocity}"
      motor_number="1"
      rotor_drag_coefficient="${rotor_drag_coefficient}"
      rolling_moment_coefficient="${rolling_moment_coefficient}"
      color="Black">
      <origin xyz="-${sqrt2 * arm_length} ${sqrt2 * arm_length} ${rotor_offset_top}" rpy="0 0 0" />
      <xacro:insert_block name="rotor_inertia" />
    </xacro:vertical_rotor>

    <xacro:vertical_rotor
      robot_namespace="${namespace}"
      suffix="front_left"
      direction="cw"
      motor_constant="${motor_constant}"
      moment_constant="${moment_constant}"
      parent="base_link"
      mass_rotor="${mass_rotor}"
      radius_rotor="${radius_rotor}"
      time_constant_up="${time_constant_up}"
      time_constant_down="${time_constant_down}"
      max_rot_velocity="${max_rot_velocity}"
      motor_number="2"
      rotor_drag_coefficient="${rotor_drag_coefficient}"
      rolling_moment_coefficient="${rolling_moment_coefficient}"
      color="Black">
      <origin xyz="${sqrt2 * arm_length} ${sqrt2 * arm_length} ${rotor_offset_top}" rpy="0 0 0" />
      <xacro:insert_block name="rotor_inertia" />
    </xacro:vertical_rotor>

    <xacro:vertical_rotor
      robot_namespace="${namespace}"
      suffix="back_right"
      direction="cw"
      motor_constant="${motor_constant}"
      moment_constant="${moment_constant}"
      parent="base_link"
      mass_rotor="${mass_rotor}"
      radius_rotor="${radius_rotor}"
      time_constant_up="${time_constant_up}"
      time_constant_down="${time_constant_down}"
      max_rot_velocity="${max_rot_velocity}"
      motor_number="3"
      rotor_drag_coefficient="${rotor_drag_coefficient}"
      rolling_moment_coefficient="${rolling_moment_coefficient}"
      color="Black">
      <origin xyz="-${sqrt2 * arm_length} -${sqrt2 * arm_length} ${rotor_offset_top}" rpy="0 0 0" />
      <xacro:insert_block name="rotor_inertia" />
    </xacro:vertical_rotor>

    <!-- HITL model config -->
    <xacro:if value="$(arg hitl_model)">
      <!-- Add illustrative transparent sphere around the drone -->
      <xacro:if value="$(arg complex_visualization_supported)">
        <gazebo reference="base_link">
          <visual name="base_link::collision_sphere">
            <material>
              <ambient>1 0 0 0.3</ambient>
              <diffuse>1 0 0 0.3</diffuse>
              <specular>1 0 0 0.3</specular>
              <emissive>0 0 0 0.3</emissive>
            </material>
          </visual>
        </gazebo>
       </xacro:if>

      <!-- DJI Gazebo Controller Plugin -->
      <gazebo>
        <plugin name='hitl_controller' filename='libdji_m100_controller_gazebo_hitl.so'>
          <allow_contact_sensing>$(arg collision_enabled)</allow_contact_sensing> <!-- If you want to enable contact sensing make it true -->
          <initial_height>1.0</initial_height>
        </plugin>
      </gazebo>
    </xacro:if>
    <!-- SITL model config -->
    <xacro:unless value="$(arg hitl_model)">
      <xacro:if value="$(arg complex_visualization_supported)">
        <gazebo reference="base_link">
          <visual name="base_link::collision_sphere">
            <material>
              <ambient>0 0 1 0.3</ambient>
              <diffuse>0 0 1 0.3</diffuse>
              <specular>0 0 1 0.3</specular>
              <emissive>0 0 0 0.3</emissive>
            </material>
          </visual>
        </gazebo>
      </xacro:if>
      <!-- Instantiate a controller. -->
      <xacro:if value="$(arg rotors_controlled)">
        <gazebo>
          <plugin name="rotors_controller_interface" filename="librotors_gazebo_controller_interface.so">
            <robotNamespace>${namespace}</robotNamespace>
            <commandAttitudeThrustSubTopic>command/attitude</commandAttitudeThrustSubTopic>
            <commandRateThrustSubTopic>command/rate</commandRateThrustSubTopic>
            <commandMotorSpeedSubTopic>command/motor_speed</commandMotorSpeedSubTopic>
            <imuSubTopic>imu</imuSubTopic>
            <motorSpeedCommandPubTopic>gazebo/command/motor_speed</motorSpeedCommandPubTopic>
          </plugin>
        </gazebo>
      </xacro:if>
      <xacro:unless value="$(arg rotors_controlled)">
        <gazebo>
          <plugin name="sitl_controller" filename="libgazebo_ros_control.so">
            <controlPeriod>0.01</controlPeriod>
            <robotSimType>dji_m100_controller_gazebo_sitl/DJIM100HardwareSim</robotSimType>
            <allow_contact_sensing>$(arg collision_enabled)</allow_contact_sensing>
          </plugin>
        </gazebo>
      </xacro:unless>
      <!-- Battery -->
      <gazebo reference="base_link">
        <battery name="linear_battery">
          <voltage>12.592</voltage>
        </battery>
      </gazebo>
      <gazebo>
        <!-- Battery voltage tracker -->
        <plugin name="battery" filename="libLinearBatteryPlugin.so">
          <link_name>base_link</link_name>
          <battery_name>linear_battery</battery_name>
          <open_circuit_voltage_constant_coef>12.694</open_circuit_voltage_constant_coef>
          <open_circuit_voltage_linear_coef>-6.7424</open_circuit_voltage_linear_coef>
          <initial_charge>1.1665</initial_charge>
          <capacity>1.2009</capacity>
          <resistance>0.061523</resistance>
          <smooth_current_tau>5.9499</smooth_current_tau>
        </plugin>
        <!-- Battery voltage consumer -->
        <plugin name="motherboard" filename="libLinearBatteryConsumerPlugin.so">
          <link_name>base_link</link_name>
          <battery_name>linear_battery</battery_name>
          <power_load>606.6</power_load>
        </plugin>
        <!-- Noisy odometry sensor attached to the robot-->
        <plugin name="odometry_sensor_plugin" filename="libgazebo_ros_p3d.so">
          <robotNamespace>/${namespace}</robotNamespace>
          <bodyName>base_link</bodyName>
          <topicName>odometry</topicName>
          <frameName>/world</frameName>
          <gaussianNoise>0.01</gaussianNoise>
          <updateRate>50</updateRate>
        </plugin>
        <!-- Noisy IMU sensor attached to the robot-->
        <plugin name="imu_sensor_plugin" filename="libgazebo_ros_imu.so">
          <alwaysOn>true</alwaysOn>
          <bodyName>base_link</bodyName>
          <topicName>imu</topicName>
          <serviceName>imu_service</serviceName>
          <gaussianNoise>0.01</gaussianNoise>
          <updateRate>50</updateRate>
        </plugin>
      </gazebo>
    </xacro:unless>

    <!-- Contact sensor -->
    <gazebo reference="base_link">
      <sensor name="body_contact_sensor" type="contact">
        <always_on>true</always_on>
        <contact>
          <collision>base_link_collision</collision>
        </contact>
        <plugin name="dji_m100_bumper" filename="libgazebo_ros_bumper.so">
          <bumperTopicName>contact</bumperTopicName>
          <frameName>base_link</frameName>
        </plugin>
      </sensor>
    </gazebo>
    <!-- Ground truth odometry -->
    <gazebo>
      <plugin name="ground_truth_odometry" filename="libgazebo_ros_p3d.so">
        <robotNamespace>/${namespace}</robotNamespace>
        <bodyName>base_link</bodyName>
        <topicName>ground_truth/odometry</topicName>
        <frameName>/world</frameName>
        <gaussianNoise>0</gaussianNoise>
        <updateRate>20</updateRate>
      </plugin>
    </gazebo>
  </xacro:macro>
</robot>
